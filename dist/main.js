(()=>{"use strict";function e(e){let t=e;const o=document.querySelector(".todo-list"),l=document.createElement("div");l.className="todo",l.id=t.title;const c=document.createElement("div");c.className="todo-header";const n=document.createElement("h4");n.textContent=t.title;const s=document.createElement("p");s.textContent=t.date,c.appendChild(n),c.appendChild(s);const r=document.createElement("div");r.className="todo-content";const d=document.createElement("p");d.id="description",d.textContent=t.description;const a=document.createElement("div");a.className="delete-todo",a.textContent="Delete",r.appendChild(d),l.appendChild(c),l.appendChild(r),l.appendChild(a),o.appendChild(l)}function t(){document.querySelectorAll(".delete-todo").forEach((e=>{e.addEventListener("click",(e=>{console.log(e);let t=e.target.parentNode.id;l(list_of_projects,t)}))}))}const o=e=>{document.querySelectorAll(".project-item").forEach((e=>{e.classList.contains("active")&&e.classList.remove("active")})),e.toggle("active"),t()};function l(e,t){console.log("executing delete_task");let o=e;console.log(o);let l,c=document.querySelectorAll(".project-item"),n=t;console.log("This is the target task: ",n),c.forEach((e=>{e.classList.contains("active")&&(l=e.id,console.log("Here is the target project: ",l))})),o.forEach((e=>{e.name===l&&(l=e,console.log("Found the actual project from list of projects! :) ",l))})),console.log("Task before being deleted",l.getTasks()),l.deleteTask(n),console.log("Task deleted",l.getTasks()),console.log(l);const s=document.getElementById(`${n}`);for(;s.firstChild;)s.removeChild(s.firstChild);s.remove()}!function(){document.querySelector("#home");const c=document.querySelector("#article-project"),n=document.querySelector("#article-todo"),s=document.querySelector("#openprojectform"),r=document.querySelector("#submit_project"),d=document.querySelector("#exit-project-form"),a=document.querySelector("#opentodoform"),i=document.querySelector("#submit_todo"),m=document.querySelector("#exit-todo-form"),u=[];c.addEventListener("click",(e=>{s.style.transform="scale(1)",console.log(e.target)})),n.addEventListener("click",(e=>{a.style.transform="scale(1)"})),m.addEventListener("click",(e=>a.style.transform="scale(0)")),d.addEventListener("click",(e=>s.style.transform="scale(0)")),r.addEventListener("click",(l=>{l.preventDefault();let c=(e=>{const t=(e=>{let t=[];const o={addTask:e=>{t.push(e)},deleteTask:e=>{t=t.filter((t=>t.title!=e))},getTasks:()=>t};return Object.assign(o,{name:e})})(e);return t})(s.title.value);console.log(c),function(e){let t=e,o=e.name,l=document.querySelector(".project-list"),c=document.createElement("div");c.className="project-item",c.id=`${o}`,c.textContent=o;let n=document.createElement("div");n.className="container",c.appendChild(n),l.appendChild(c),n.textContent=t.getTasks()}(c),u.push(c),console.log("Here is list of projects",u),s.style.transform="scale(0)",(l=>{let c=l;document.querySelectorAll(".project-item").forEach((t=>{t.addEventListener("click",(l=>{o(t.classList),console.log(l),console.log(t.classList),console.log(t.id),document.querySelector(".todo-list").innerHTML="",(t=>{let o=document.querySelector(".todo-list"),l=c.map((e=>e.name)).indexOf(t),n=c[l].getTasks();n.length>0?n.forEach((t=>e(t))):o.innerHTML=""})(t.id)}))})),t()})(u),(()=>{let e=document.querySelector(".project-list").lastElementChild;o(e.classList)})()})),i.addEventListener("click",(o=>{o.preventDefault();let c=((e,t,o)=>{const l=((e,t,o)=>({title:e,date:t,description:o}))(e,t,o);return l})(a.title.value,a.date.value,a.description.value);((e,o)=>{let l,c,n,s=o,r=document.querySelector(".project-list"),d=Array.from(r.children);console.log("Here is the children from render_task_page: ",d);let a=d.map((e=>e.className)).indexOf("project-item active");l=d[a],l=l.textContent,console.log("Here is the project id",l),c=s.map((e=>e.name)).indexOf(l),console.log("Here is the addproject",c),-1===c&&console.log("Error, project not found."),n=s[c],console.log(n),n.addTask(e),console.log(`${JSON.stringify(n.getTasks())}`),s.forEach((e=>{console.log(`Here is the project: ${JSON.stringify(e)} and list of tasks: ${JSON.stringify(e.getTasks())}`)})),t()})(c,u),e(c),a.style.transform="scale(0)",document.querySelectorAll(".delete-todo").forEach((e=>{e.addEventListener("click",(e=>{console.log(e);let t=e.target.parentNode.id;l(u,t)}))}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,