(()=>{"use strict";!function(){document.querySelector("#home");const e=document.querySelector("#article-project"),t=document.querySelector("#article-todo"),o=document.querySelector("#openprojectform"),c=document.querySelector("#submit_project"),n=document.querySelector("#exit-project-form"),l=document.querySelector("#opentodoform"),r=document.querySelector("#submit_todo"),s=document.querySelector("#exit-todo-form");document.querySelector(".results"),document.querySelector(".master-container"),document.querySelectorAll(".project-item"),document.querySelector(".project-list");const i=[];function a(e){let t=e;const o=document.querySelector(".todo-list"),c=document.createElement("div");c.className="todo";const n=document.createElement("div");n.className="todo-header";const l=document.createElement("h4");l.textContent=t.title;const r=document.createElement("p");r.textContent=t.date,n.appendChild(l),n.appendChild(r);const s=document.createElement("div");s.className="todo-content";const i=document.createElement("p");i.id="description",i.textContent=t.description,s.appendChild(i),c.appendChild(n),c.appendChild(s),o.appendChild(c)}e.addEventListener("click",(e=>{o.style.transform="scale(1)",console.log(e.target)})),t.addEventListener("click",(e=>{l.style.transform="scale(1)"})),s.addEventListener("click",(e=>l.style.transform="scale(0)")),n.addEventListener("click",(e=>o.style.transform="scale(0)")),c.addEventListener("click",(e=>{e.preventDefault();let t=(e=>{const t=(e=>{let t=[];const o={addTask:e=>{t.push(e)},deleteTask:e=>{t=t.filter((t=>t.title!=e))},getTasks:()=>t};return Object.assign(o,{name:e})})(e);return t})(o.title.value);console.log(t),function(e){let t=e,o=e.name,c=document.querySelector(".project-list"),n=document.createElement("div");n.className="project-item",n.id=`${o}`,n.textContent=o;let l=document.createElement("div");l.className="container",n.appendChild(l),c.appendChild(n),l.textContent=t.getTasks()}(t),i.push(t),console.log("Here is list of projects",i),o.style.transform="scale(0)",d(),m()})),r.addEventListener("click",(e=>{e.preventDefault();let t=((e,t,o)=>{const c=((e,t,o)=>({title:e,date:t,description:o}))(e,t,o);return c})(l.title.value,l.date.value,l.description.value);console.log(t),function(e){let t,o,c;Array.from(document.querySelectorAll(".project-item")).forEach((e=>{t="project-item active"===e.className?e.id:""})),console.log("Here is the project id",t),o=i.map((e=>e.name)).indexOf(t),console.log("Here is the addproject",o),-1===o&&console.log("Error, project not found."),c=i[o],console.log(c),c.addTask(e),console.log(`${JSON.stringify(c.getTasks())}`),i.forEach((e=>{console.log(`Here is the project: ${JSON.stringify(e)} and list of tasks: ${JSON.stringify(e.getTasks())}`)}))}(t),a(t),l.style.transform="scale(0)"}));const d=()=>{document.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(t=>{u(e.classList),console.log(t),console.log(e.classList),console.log(e.id),document.querySelector(".todo-list").innerHTML="",function(e){let t=document.querySelector(".todo-list"),o=i.map((e=>e.name)).indexOf(e),c=i[o].getTasks();c.length>0?c.forEach((e=>a(e))):t.innerHTML=""}(e.id)}))}))},m=()=>{let e=document.querySelector(".project-list").lastElementChild;u(e.classList)},u=e=>{document.querySelectorAll(".project-item").forEach((e=>{e.classList.contains("active")&&e.classList.remove("active")})),e.toggle("active")}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,