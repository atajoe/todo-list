(()=>{"use strict";class e{constructor(e){this.title=e,this.todoList=[]}}let t=[];const o=document.querySelector("#home"),r=document.querySelector(".newprojectform"),c=document.querySelector("#project-master"),l=document.querySelector("#submit_todo"),n=document.querySelector("#submit_project"),s=document.querySelector("#project"),i=document.querySelector(".results");document.querySelector(".project-list");let u=document.querySelectorAll(".project-item");o.addEventListener("click",(e=>{console.log("lmfaooo")})),c.addEventListener("click",(e=>{newprojectformaster.style.transform="scale(1)"})),n.addEventListener("click",(o=>{o.preventDefault();let r=document.getElementById("newprojectformaster").title.value,c=new e(r);t.push(c),(e=>{const t=document.querySelector(".project-list");let o=document.createElement("div");o.className="project-item",o.id="project-item",o.setAttribute("project",`${e}`),o.innerHTML=e,t.appendChild(o)})(r),newprojectformaster.style.transform="scale(0)",i.textContent=JSON.stringify(t),console.log(u),console.log(t)})),s.addEventListener("click",(e=>{console.log("lmfaooo"),r.style.transform="scale(1)"})),l.addEventListener("click",(e=>{e.preventDefault();let o=function(){let e=document.querySelector(".newprojectform"),t={};return t.title=e.title.value,t.description=e.description.value,t.date=e.date.value,t}();console.log(o),t[0].todoList.push(o),r.style.transform="scale(0)",i.innerHTML=JSON.stringify(t)})),u.forEach((e=>{e.addEventListener("click",(e=>{console.log(e.target),console.log("works!")}))})),console.log("testing")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,